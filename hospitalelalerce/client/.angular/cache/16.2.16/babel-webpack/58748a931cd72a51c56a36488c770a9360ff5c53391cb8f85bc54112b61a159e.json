{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\nimport { GLOBAL } from './global';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nlet PacienteService = /*#__PURE__*/(() => {\n  class PacienteService {\n    constructor(http) {\n      this.http = http;\n      // URL base: usa la variable GLOBAL (ej: http://localhost:3000/api)\n      this.baseApi = GLOBAL.url.replace(/\\/api\\/?$/i, '');\n      this.url = `${this.baseApi}/api/pacientes`;\n      this.urlAll = `${this.baseApi}/api/pacientes/all`;\n    }\n    // reemplaza el método list()\n    list() {\n      return this.http.get(this.url).pipe(map(res => {\n        // aceptar array directo\n        if (Array.isArray(res)) return res;\n        // aceptar forma { ok: true, data: [...] }\n        if (res && typeof res === 'object') {\n          if (res.ok === false) {\n            console.warn('[PacienteService] list() backend returned ok:false', res);\n            return [];\n          }\n          if (Array.isArray(res.data)) return res.data;\n          if (Array.isArray(res.pacientes)) return res.pacientes;\n          if (Array.isArray(res.results)) return res.results;\n        }\n        return [];\n      }), tap(data => console.log('[PacienteService] list() normalized length:', (data || []).length)), catchError(err => {\n        console.error('[PacienteService] list() error:', err);\n        return of([]);\n      }));\n    }\n    // reemplaza getById para aceptar { ok, data } o objeto directo\n    getById(id) {\n      if (!id) return of({});\n      return this.http.get(`${this.url}/${id}`).pipe(map(res => {\n        if (!res) return {};\n        if (res && typeof res === 'object') {\n          if (res.ok === false) {\n            console.warn('[PacienteService] getById() backend returned ok:false', res);\n            return {};\n          }\n          if (res.data && typeof res.data === 'object') return res.data;\n        }\n        // si es objeto paciente directo\n        return res;\n      }), tap(data => console.log('[PacienteService] getById() normalized:', data)), catchError(err => {\n        console.error('[PacienteService] getById() error:', err);\n        return of({});\n      }));\n    }\n    create(paciente) {\n      return this.http.post(this.url, paciente).pipe(tap(res => console.log('[PacienteService] create() response:', res)), catchError(err => {\n        console.error('[PacienteService] create() error:', err);\n        return of(err);\n      }));\n    }\n    update(id, paciente) {\n      return this.http.put(`${this.url}/${id}`, paciente).pipe(tap(res => console.log('[PacienteService] update() response:', res)), catchError(err => {\n        console.error('[PacienteService] update() error:', err);\n        return of(err);\n      }));\n    }\n    delete(id) {\n      return this.http.delete(`${this.url}/${id}`).pipe(tap(res => console.log('[PacienteService] delete() response:', res)), catchError(err => {\n        console.error('[PacienteService] delete() error:', err);\n        return of(err);\n      }));\n    }\n    // reemplaza search() para aceptar varias formas de respuesta\n    search(filters) {\n      let params = new HttpParams();\n      if (filters.sexo) params = params.set('sexo', filters.sexo);\n      if (filters.fechaIngreso) params = params.set('fechaIngreso', filters.fechaIngreso);\n      if (filters.enfermedad) params = params.set('enfermedad', filters.enfermedad);\n      return this.http.get(`${this.url}/search`, {\n        params\n      }).pipe(map(res => {\n        if (Array.isArray(res)) return res;\n        if (res && typeof res === 'object') {\n          if (res.ok === false) {\n            console.warn('[PacienteService] search() backend returned ok:false', res);\n            return [];\n          }\n          if (Array.isArray(res.data)) return res.data;\n          if (Array.isArray(res.pacientes)) return res.pacientes;\n        }\n        return [];\n      }), tap(data => console.log('[PacienteService] search() normalized:', data.length)), catchError(err => {\n        console.error('[PacienteService] search() error:', err);\n        return of([]);\n      }));\n    }\n    getImageUrl(fotoPersonal) {\n      const placeholder = 'https://via.placeholder.com/160x160.png?text=Paciente';\n      if (!fotoPersonal) return placeholder;\n      const isAbsolute = /^(https?:)?\\/\\//i.test(fotoPersonal);\n      if (isAbsolute) return fotoPersonal;\n      return `${this.baseApi}/uploads/${encodeURIComponent(fotoPersonal)}`;\n    }\n    static {\n      this.ɵfac = function PacienteService_Factory(t) {\n        return new (t || PacienteService)(i0.ɵɵinject(i1.HttpClient));\n      };\n    }\n    static {\n      this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n        token: PacienteService,\n        factory: PacienteService.ɵfac,\n        providedIn: 'root'\n      });\n    }\n  }\n  return PacienteService;\n})();\nexport { PacienteService };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}